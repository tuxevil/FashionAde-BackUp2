using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Web.Mvc;
using System.Web.Security;
using FashionAde.ApplicationServices;
using FashionAde.Core;
using FashionAde.Core.Accounts;
using FashionAde.Core.Clothing;
using FashionAde.Core.DataInterfaces;
using FashionAde.Core.MVCInteraction;
using FashionAde.Core.UserCloset;
using FashionAde.Web.Controllers.MVCInteraction;
using SharpArch.Web.NHibernate;

namespace FashionAde.Web.Controllers
{
    [HandleError]
    public class RatingController : Controller
    {
        private IFriendRatingInvitationRepository friendRatingInvitationRepository;
        private IClosetOutfitRepository closetOutfitRepository;
        private IMessageSenderService messageSenderService;
        private IRegisteredUserRepository registeredUserRepository;
        private IOutfitUpdaterRepository outfitUpdaterRepository;
        private static Regex isGuid = new Regex(@"^(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}$", RegexOptions.Compiled);

        public RatingController(IFriendRatingInvitationRepository friendRatingInvitationRepository, IClosetOutfitRepository closetOutfitRepository, IMessageSenderService messageSenderService, IRegisteredUserRepository registeredUserRepository, IOutfitUpdaterRepository outfitUpdaterRepository)
        {
            this.friendRatingInvitationRepository = friendRatingInvitationRepository;
            this.closetOutfitRepository = closetOutfitRepository;
            this.messageSenderService = messageSenderService;
            this.registeredUserRepository = registeredUserRepository;
            this.outfitUpdaterRepository = outfitUpdaterRepository;
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult Index(string id)
        {
            if (IsInt(id))
                return IndexByInt(Convert.ToInt32(id));
            if(IsGuid(id))
                return IndexByGuid(new Guid(id));
            
            return View("Error");
        }

        private bool IsSameUser(int userId)
        {
            MembershipUser mu = Membership.GetUser();
            RegisteredUser user;
            if(mu != null)
            {
                user = registeredUserRepository.GetByMembershipId(Convert.ToInt32(mu.ProviderUserKey));
                if (user != null)
                {
                    ViewData["UserName"] = user.UserName;
                    return user.Id == userId;
                }
            }
            return false;
        }

        private bool IsInt(string id)
        {
            foreach (char c in id)
                if(!Char.IsNumber(c))
                    return false;
            return true;
        }

        private bool IsGuid(string candidate)
        {
            bool isValid = false;
            if (candidate != null)
                if (isGuid.IsMatch(candidate))
                    isValid = true;
            return isValid;
        }

        private ActionResult IndexByGuid(Guid id)
        {
            FriendRatingInvitation invitation = friendRatingInvitationRepository.GetByKey(id.ToString());

            if (invitation == null)
                return View("Error");

            if(IsSameUser(invitation.User.Id))
                return RedirectToAction("Index", "Home");

            if (invitation.FriendRateOn > invitation.InvitationSentOn || invitation.Rate > 0)
                return View("Thanks", invitation);
            
            invitation.Outfit = closetOutfitRepository.GetByClosetOutfitId(invitation.ClosetOutfit.Id);

            if (invitation.Outfit == null)
                return RedirectToAction("Index", "Home");

            ViewData["Updater"] = outfitUpdaterRepository.GetRandomOutfitUpdaterFor(invitation.Outfit.PreCombination);

            return View(invitation);    
        }

        private ActionResult IndexByInt(int id)
        {
            ClosetOutfitView closetOutfit = closetOutfitRepository.GetByClosetOutfitId(id);
            if (closetOutfit == null)
                return View("Error");

            if (IsSameUser(closetOutfit.ClosetOutfit.Closet.User.Id))
                return RedirectToAction("Index", "Home");

            FriendRatingInvitation invitation = new FriendRatingInvitation();
            invitation.FriendEmail = "Generated by FaceBook";
            invitation.InvitationSentOn = DateTime.Now;
            invitation.FriendRateOn = invitation.InvitationSentOn;
            invitation.KeyCode = Guid.NewGuid().ToString();
            invitation.Message = "Generated by FaceBook";
            invitation.ClosetOutfit = closetOutfitRepository.Get(id);
            invitation.User = invitation.ClosetOutfit.Closet.User;
            friendRatingInvitationRepository.DbContext.BeginTransaction();
            friendRatingInvitationRepository.SaveOrUpdate(invitation);
            friendRatingInvitationRepository.DbContext.CommitTransaction();

            invitation.Outfit = closetOutfit;

            ViewData["Updater"] = outfitUpdaterRepository.GetRandomOutfitUpdaterFor(invitation.Outfit.PreCombination);
            
            return View(invitation);
        }

        [AcceptVerbs(HttpVerbs.Post)]
        [Transaction]
        public ActionResult Index(FriendRatingHelper rating, Guid Key)
        {
            FriendRatingInvitation invitation = friendRatingInvitationRepository.GetByKey(Key.ToString());
            invitation.Outfit = closetOutfitRepository.GetByClosetOutfitId(invitation.ClosetOutfit.Id);
            IsSameUser(invitation.User.Id);
            if (ModelState.IsValid)
            {
                if (invitation.FriendRateOn > invitation.InvitationSentOn || invitation.Rate > 0)
                    return View("Thanks", invitation);

                invitation.Rate = rating.friendsrating;
                invitation.FriendRateOn = DateTime.Now;
                invitation.Message = "";
                if (!string.IsNullOrEmpty(rating.comment))
                    invitation.Message = rating.comment;

                ClosetOutfit closetOutfit = invitation.ClosetOutfit;
                if (closetOutfit.Rating == null)
                    closetOutfit.Rating = new Rating();
                closetOutfit.Rating.Rate(rating.friendsrating, invitation);
                friendRatingInvitationRepository.SaveOrUpdate(invitation);
                closetOutfitRepository.SaveOrUpdate(closetOutfit);

                ConfirmRatingData data = new ConfirmRatingData
                                             {
                                                 Components = invitation.ClosetOutfit.Components,
                                                 Comments = rating.comment,
                                                 GarmentsUri = Resources.GetGarmentLargePath(),
                                                 RatingImg =
                                                     Resources.GetRatingLargePath() + rating.friendsrating + ".jpg",
                                                 RatingText = Resources.GetRatingText(rating.friendsrating)
                                             };

                messageSenderService.SendWithTemplate("confirmrating", invitation.User, data,
                                                      invitation.User.EmailAddress);
                return View("Thanks", invitation);
            }

            return View(invitation);
            
        }

        public class ConfirmRatingData
        {
            public string Comments { get; set; }
            public IList<Garment> Components { get; set; }
            public string GarmentsUri { get; set; }
            public string RatingImg { get; set; }
            public string RatingText { get; set; }
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult Thanks(FriendRatingInvitation invitation)
        {
            MembershipUser mu = Membership.GetUser();
            RegisteredUser user;
            if (mu != null)
            {
                user = registeredUserRepository.GetByMembershipId(Convert.ToInt32(mu.ProviderUserKey));
                if (user != null)
                    ViewData["UserName"] = user.UserName;
            }
            return View(invitation);
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult Error()
        {
            MembershipUser mu = Membership.GetUser();
            RegisteredUser user;
            if (mu != null)
            {
                user = registeredUserRepository.GetByMembershipId(Convert.ToInt32(mu.ProviderUserKey));
                if (user != null)
                    ViewData["UserName"] = user.UserName;
            }
            return View();
        }
        
    }
}
